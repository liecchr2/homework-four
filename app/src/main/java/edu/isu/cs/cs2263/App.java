/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs.cs2263;

import com.google.common.graph.MutableNetwork;
import com.google.common.graph.NetworkBuilder;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.Vector;

public class App extends Application {
    Vector<User> userCatalog = new Vector<>();

    @Override
    public void start(Stage stage) throws Exception {
        /*
        This will need to be revisited when it is time to write things to a file

        //Initialize file
        FileManager manager = new FileManager();

        //Define file path
        String file = "C:\\Users\\chris\\OneDrive\\Desktop\\Spring 2021\\CS2263\\homework-four\\users.json";

        //Pull data from file
        ArrayList<User> display = manager.readFile(file);
        */

        //Text Labels
        Text newName = new Text("Name");
        Text newAge = new Text("Age");
        Text connect = new Text("Select Relationship");
        Text userList = new Text("Select User");
        Text show = new Text("Select User");
        Text showRelation = new Text("Display Relationship");
        Text showSum = new Text("Display Relationship Summary");

        //Set title for stage
        stage.setTitle("Social Network");

        //Textfields
        TextField newUser = new TextField();
        TextField age = new TextField();

        //Combo Box
        ComboBox<String> chooseRelationship = new ComboBox<>();
        chooseRelationship.getItems().add(" -- married to -- ");
        chooseRelationship.getItems().add(" -- friends with -- ");
        chooseRelationship.getItems().add(" -- related to -- ");

        //Define network graph
        MutableNetwork<String, String> relation = NetworkBuilder.directed().allowsParallelEdges(true).build();

        /*
        This may need to be revisited when it is time to write things to a file

        //ListView for users
        ListView<String> usersList = new ListView<>();

        ObservableList<String> people = FXCollections.observableArrayList(display.toString());
        usersList.setItems(people);
        */

        //Button
        Button addUser = new Button("Add User");
        addUser.setAlignment(Pos.BOTTOM_LEFT);

        Button displayUsers = new Button("Display Users");
        displayUsers.setAlignment(Pos.BASELINE_RIGHT);

        Button connectUsers = new Button("Connect Users");

        //Listview
        ListView<String> catalogView = new ListView<>();
        catalogView.setPrefWidth(150);
        catalogView.setPrefHeight(200);

        ListView<String> userView = new ListView<>();
        userView.setPrefWidth(150);
        userView.setPrefHeight(200);

        ListView<String> viewRelation = new ListView<>();
        viewRelation.setPrefWidth(150);
        viewRelation.setPrefHeight(200);

        //Action for entering user
        addUser.setOnAction((new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                try{
                    userCatalog.add(new User(newUser.getText(), Integer.parseInt(age.getText())));
                } catch (NumberFormatException ex){
                    System.err.println("Name: enter characters, Age: enter numbers");
                }
            }
        }));

        //Action for displaying all users, and showing error if empty
        displayUsers.setOnAction((new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                ObservableList<String> disp = FXCollections.observableArrayList();
                for (int i = 0; i < userCatalog.size(); i++){
                    disp.add(userCatalog.get(i).toString());
                }
                if (!disp.isEmpty()){
                    catalogView.setItems(disp);
                    userView.setItems(disp);
                } else {
                    disp.add("Error: No Users Found!");
                    catalogView.setItems(disp);
                    userView.setItems(disp);
                }
            }
        }));

        //Action for connecting users
        connectUsers.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                String index = catalogView.getSelectionModel().getSelectedItems().toString();
                String index1 = userView.getSelectionModel().getSelectedItems().toString();

                ObservableList<String> allRel = FXCollections.observableArrayList();

                relation.addEdge(index, index1, chooseRelationship.getValue().toString());

                allRel.add(relation.nodes().toString() + relation.outEdges(index).toString());
                //allRel.add(relation.outEdges(index).toString());

                viewRelation.setItems(allRel);
                catalogView.getSelectionModel().clearSelection();
                userView.getSelectionModel().clearSelection();
            }
        });

        //Set Stage
        VBox first = new VBox(10, newName, newUser, newAge, age, addUser);
        VBox second = new VBox(10,userList, catalogView, displayUsers);
        VBox third = new VBox(10, connect, chooseRelationship);
        //VBox fourth = new VBox(10, show, viewRelation, connectUsers);
        VBox fourth = new VBox(10, show, userView, connectUsers);
        VBox fifth = new VBox(10, showRelation, viewRelation);
        VBox sixth = new VBox(10, showSum);

        HBox top = new HBox(10, first, second, third, fourth);
        //top.setAlignment(Pos.TOP_CENTER);
        HBox bottom = new HBox(10, fifth, sixth);
        //bottom.setAlignment(Pos.BOTTOM_CENTER);
        VBox all = new VBox(20, top, bottom);

        //Create Scene
        Scene scene = new Scene(all);
        stage.setScene(scene);

        //shows the window
        stage.show();
    }

    public static void main(String[] args) {
        /*
        This will need to be revisited when it is time to write things to a file

        //Initialize IO Manager
        FileManager manager = new FileManager();

        //Path of file
        String file = "C:\\Users\\chris\\OneDrive\\Desktop\\Spring 2021\\CS2263\\homework-four\\users.json";

        manager.writeFile(file, User.getUserList());

       */
        Application.launch(args);
    }
}
